//
MDAL_VERSION(0);

WORD_DIRECTIVE("dw");
BYTE_DIRECTIVE("db");
HEX_PREFIX("#");


CFG_COMMANDS {
			
	WORD("FX","fx0", FORCE_STRING|REFERENCE("FxTables"));						//fx table select	
	WORD("A", 0, USE_LAST_SET);									//freq op1
	WORD("B", 0, USE_LAST_SET);									//freq op2
	BYTE("DA", $40, USE_LAST_SET);									//duty op1
	BYTE("DB", $40, USE_LAST_SET);									//duty op2
	BYTE("SIDA", $c6, USE_LAST_SET|FORCE_SUBSTITUTION("off"=$c6, "on"=$ce));			//sid op1
	BYTE("SIDB", $c6, USE_LAST_SET|FORCE_SUBSTITUTION("off "=$c6, "on"=$ce));			//sid op2
	BYTE("ESA", 0, USE_LAST_SET);									//earth shaker op1
	BYTE("ESB", 0, USE_LAST_SET);									//earth shaker op2
	WORD("PAB", 0, USE_LAST_SET);									//phase op1/2
	WORD("C", 0, USE_LAST_SET);									//freq op3
	WORD("D", 0, USE_LAST_SET);									//freq op4
	BYTE("DC", $40, USE_LAST_SET);									//duty op3
	BYTE("DD", $40, USE_LAST_SET);									//duty op4
	BOOL("NC", false, USE_LAST_SET|FORCE_SUBSTITUTION("off"=false, "on"=true));			//noise op3
	WORD("PCD", 0, USE_LAST_SET);									//phase op3/4
	
	BYTE("DRUM", 0, FORCE_SUBSTITUTION("kick"=$40, "hhat"=$80));					//click drums
	BYTE("GMIX", $b0, FORCE_REPEAT|FORCE_SUBSTITUTION("or"=$b0, "xor"=$a8, "and"=$a0));		//global mix
	BYTE("MIXAB", $b0, USE_LAST_SET|FORCE_SUBSTITUTION("or"=$b0, "xor"=$a8, "and"=$a0));		//mix op1/2
	BYTE("MIXCD", $b0, USE_LAST_SET|FORCE_SUBSTITUTION("or"=$b0, "xor"=$a8, "and"=$a0));		//mix op3/4
	BYTE("GSPD", $10, GLOBAL_CONST);								//global speed
	BYTE("SPD", $10, FORCE_REPEAT);									//row speed
	
	WORD("FXJUMP", "fx0", FORCE_STRING|REFERENCE("FxTables"));					//fx table jump
	BOOL("FXSTOP", false, AUTO(true));								//fx table end
}


CFG_SEQUENCE {
	USE_END("dw 0");
	USE_LABEL("mdseq");
	USE_LOOP(LABEL, "loop");
	USE_TRACKS(1);
}


CFG_BLOCK {
	ID("Patterns");
	TYPE(PATTERN);
	USE_END("db #40");
	//MAX_LENGTH(3);

	WORD(REQUIRED(), SET_IF(!(A&B&DA&DB&SIDA&SIDB&ESA&ESB&PAB&C&D&DC&DD&NC&PCD&MIXAB&MIXCD), 4), SET_IF(!FX, 1), SET_IF(!(A&B&DA&DB&SIDA&SIDB&ESA&ESB&PAB&MIXAB), $80), SET_HI(GMIX));	//ctrl0
	WORD(SET(FX));														//fx table pointer
	WORD(REQUIRED(A|B|DA|DB|SIDA|SIDB|ESA|ESB|PAB|MIXAB), SET_IF(!(A&B), 1), SET_IF(!(SIDA&SIDB&ESA&ESB), 4), SET_IF(!(DA&DB), $40), SET_IF(!PAB, $80), SET_HI(MIXAB));	//ctrl1
	WORD(REQUIRED(B), SET(A));												//freq op1
	WORD(REQUIRED(A), SET(B));												//freq op2
	WORD(SET_HI(DA), SET_LO(DB));												//duty op1/2
	WORD(REQUIRED(SIDB|ESB), SET_HI(ESA), SET_LO(SIDA));									//sid/es op1
	WORD(REQUIRED(SIDA|ESA), SET_HI(ESB), SET_LO(SIDB));									//sid/es op2
	WORD(SET(PAB));														//phase op1/2
	WORD(REQUIRED(A|B|DA|DB|SIDA|SIDB|ESA|ESB|PAB|MIXAB| C|D|DC|DD|NC|PCD|MIXCD), SET_IF(!(C&D), 1), SET_IF(!(DC&DD), $40), SET_IF(!PCD, $80), SET_HI(MIXCD), SET_BITS(NC, 4));	//ctrl2
	WORD(REQUIRED(D), SET(C));												//freq op3
	WORD(REQUIRED(C), SET(D));												//freq op4
	WORD(SET_HI(DC), SET_LO(DD));												//duty op3/4
	WORD(SET(PCD));														//phase op3/4
	WORD(REQUIRED(), SET_HI(SPD), SET_LO(DRUM));										//ctrl3 (speed/drum)

	REQUIRE_SEQ_BEGIN();
}

CFG_BLOCK {
	ID("FxTables");
	TYPE(TABLE);
	
	WORD(REQUIRED(), SET_IF(!(A&B&DA&DB&SIDA&SIDB&ESA&ESB&PAB&C&D&DC&DD&NC&PCD&MIXAB&MIXCD), 4), SET_IF(!(A&B&DA&DB&SIDA&SIDB&ESA&ESB&PAB&MIXAB), $80), SET_HI(GMIX), SET_IF(FXJUMP, 1, CLEAR), SET_BITS(FXSTOP, $40, CLEAR));	//ctrl0
	WORD(SET(FXJUMP));
	WORD(REQUIRED(A|B|DA|DB|SIDA|SIDB|ESA|ESB|PAB|MIXAB), SET_IF(!(A&B), 1), SET_IF(!(SIDA&SIDB&ESA&ESB), 4), SET_IF(!(DA&DB), $40), SET_IF(!PAB, $80), SET_HI(MIXAB));	//ctrl1
	WORD(REQUIRED(B), SET(A));												//freq op1
	WORD(REQUIRED(A), SET(B));												//freq op2
	WORD(SET_HI(DA), SET_LO(DB));												//duty op1/2
	WORD(SET_HI(ESA), SET_LO(SIDA));											//sid/es op1
	WORD(SET_HI(ESB), SET_LO(SIDB));											//sid/es op2
	WORD(SET(PAB));														//phase op1/2
	WORD(REQUIRED(A|B|DA|DB|SIDA|SIDB|ESA|ESB|PAB|MIXAB| C|D|DC|DD|NC|PCD|MIXCD), SET_IF(!(C&D), 1), SET_IF(!(DC&DD), $40), SET_IF(!PCD, $80), SET_HI(MIXCD), SET_BITS(NC, 4));	//ctrl2
	WORD(REQUIRED(D), SET(C));												//freq op3
	WORD(REQUIRED(C), SET(D));												//freq op4
	WORD(SET_HI(DC), SET_LO(DD));												//duty op3/4
	WORD(SET(PCD));
}

CFG_PATTERNS {
	USE_END("db #40");
	//MAX_LENGTH(3);

	WORD(REQUIRED(), SET_IF(!(A&B&DA&DB&SIDA&SIDB&ESA&ESB&PAB&C&D&DC&DD&NC&PCD&MIXAB&MIXCD), 4), SET_IF(!FX, 1), SET_IF(!(A&B&DA&DB&SIDA&SIDB&ESA&ESB&PAB&MIXAB), $80), SET_HI(GMIX));	//ctrl0
	WORD(SET(FX));														//fx table pointer
	WORD(REQUIRED(A|B|DA|DB|SIDA|SIDB|ESA|ESB|PAB|MIXAB), SET_IF(!(A&B), 1), SET_IF(!(SIDA&SIDB&ESA&ESB), 4), SET_IF(!(DA&DB), $40), SET_IF(!PAB, $80), SET_HI(MIXAB));	//ctrl1
	WORD(REQUIRED(B), SET(A));												//freq op1
	WORD(REQUIRED(A), SET(B));												//freq op2
	WORD(SET_HI(DA), SET_LO(DB));												//duty op1/2
	WORD(REQUIRED(SIDB|ESB), SET_HI(ESA), SET_LO(SIDA));									//sid/es op1
	WORD(REQUIRED(SIDA|ESA), SET_HI(ESB), SET_LO(SIDB));									//sid/es op2
	WORD(SET(PAB));														//phase op1/2
	WORD(REQUIRED(A|B|DA|DB|SIDA|SIDB|ESA|ESB|PAB|MIXAB| C|D|DC|DD|NC|PCD|MIXCD), SET_IF(!(C&D), 1), SET_IF(!(DC&DD), $40), SET_IF(!PCD, $80), SET_HI(MIXCD), SET_BITS(NC, 4));	//ctrl2
	WORD(REQUIRED(D), SET(C));												//freq op3
	WORD(REQUIRED(C), SET(D));												//freq op4
	WORD(SET_HI(DC), SET_LO(DD));												//duty op3/4
	WORD(SET(PCD));														//phase op3/4
	WORD(REQUIRED(), SET_HI(SPD), SET_LO(DRUM));										//ctrl3 (speed/drum)

	REQUIRE_SEQ_BEGIN();
}
	
	
CFG_TABLES {
	WORD(REQUIRED(), SET_IF(!(A&B&DA&DB&SIDA&SIDB&ESA&ESB&PAB&C&D&DC&DD&NC&PCD&MIXAB&MIXCD), 4), SET_IF(!(A&B&DA&DB&SIDA&SIDB&ESA&ESB&PAB&MIXAB), $80), SET_HI(GMIX), SET_IF(FXJUMP, 1, CLEAR), SET_BITS(FXSTOP, $40, CLEAR));	//ctrl0
	WORD(SET(FXJUMP));
	WORD(REQUIRED(A|B|DA|DB|SIDA|SIDB|ESA|ESB|PAB|MIXAB), SET_IF(!(A&B), 1), SET_IF(!(SIDA&SIDB&ESA&ESB), 4), SET_IF(!(DA&DB), $40), SET_IF(!PAB, $80), SET_HI(MIXAB));	//ctrl1
	WORD(REQUIRED(B), SET(A));												//freq op1
	WORD(REQUIRED(A), SET(B));												//freq op2
	WORD(SET_HI(DA), SET_LO(DB));												//duty op1/2
	WORD(SET_HI(ESA), SET_LO(SIDA));											//sid/es op1
	WORD(SET_HI(ESB), SET_LO(SIDB));											//sid/es op2
	WORD(SET(PAB));														//phase op1/2
	WORD(REQUIRED(A|B|DA|DB|SIDA|SIDB|ESA|ESB|PAB|MIXAB| C|D|DC|DD|NC|PCD|MIXCD), SET_IF(!(C&D), 1), SET_IF(!(DC&DD), $40), SET_IF(!PCD, $80), SET_HI(MIXCD), SET_BITS(NC, 4));	//ctrl2
	WORD(REQUIRED(D), SET(C));												//freq op3
	WORD(REQUIRED(C), SET(D));												//freq op4
	WORD(SET_HI(DC), SET_LO(DD));												//duty op3/4
	WORD(SET(PCD));	
}